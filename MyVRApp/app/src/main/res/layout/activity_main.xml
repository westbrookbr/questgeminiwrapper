<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    android:background="#1A1A1A">

    <!--
        VR Performance: Simplicity and Overdraw
        This RelativeLayout is relatively simple. In VR, complex layouts with many overlapping elements
        (overdraw) can significantly impact performance. Each pixel drawn multiple times costs rendering time.
        Tools like "Debug GPU Overdraw" in Android Developer Options can help visualize this.
        Keeping layouts flatter and minimizing overlapping transparent views is crucial.
        Using a single opaque background color (#1A1A1A here) is good as it avoids transparency at the root.

        ScrollView was added to make the Gemini responses and status messages scrollable
        if they exceed the defined height. This is important for longer text outputs.
        The layout_centerInParent="true" helps keep it centered on the screen,
        which is often desirable in VR applications.
        The fixed height (android:layout_height="300dp") provides a defined area for text,
        preventing overly long responses from pushing the button off-screen or taking up
        too much vertical space, which can be uncomfortable in VR.
        Margins provide spacing from screen edges, and padding provides internal spacing
        before the TextView content. The background and alpha create a semi-transparent
        panel for the text.

        VR Performance: Overdraw in ScrollView/TextView
        The ScrollView itself has a background (#333333) and the TextView within it also has its own.
        If the TextView's content fully covers the ScrollView's background, this is a minor overdraw.
        For very high-performance scenarios, one might make the inner TextView's background transparent
        if the ScrollView provides the desired opaque background. However, for readability and distinct
        UI elements as used here, this is generally acceptable. The alpha on ScrollView (0.9) means
        the RelativeLayout's background will be partially visible, which is an intentional visual effect
        but technically contributes to overdraw if not managed carefully in more complex scenes.
        Consider tools like Hierarchy Viewer or "Debug GPU Overdraw" for complex layouts.
    -->
    <ScrollView
        android:id="@+id/scrollView"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:layout_centerInParent="true"
        android:layout_marginLeft="20dp"
        android:layout_marginRight="20dp"
        android:layout_marginTop="20dp"
        android:layout_marginBottom="20dp"
        android:padding="10dp"
        android:background="#333333"
        android:alpha="0.9">

        <!--
            TextView is the main display area for text.
            It shows initial instructions, status updates (Listening, Thinking, Errors),
            and the final responses from the Gemini API.
            layout_width="match_parent" makes it use the full width of the ScrollView.
            layout_height="wrap_content" allows it to expand vertically to fit the content,
            enabling the ScrollView to function when text is long.
            Text alignment is centered, which can be suitable for VR interfaces,
            though 'start' alignment might be preferred for very long blocks of text.
        -->
        <TextView
            android:id="@+id/textView"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Press the button and speak to Gemini"
            android:textSize="24sp"
            android:textAlignment="center"
            android:textColor="@android:color/white"
            android:padding="10dp" />
            <!--
                VR Performance: TextViews
                - Keep text rendering efficient. Avoid very complex Spannables if not needed.
                - For frequently updating text, ensure updates are batched or managed to prevent excessive redraws.
                  (More relevant to MainActivity.kt logic but layout structure supports this).
            -->
    </ScrollView>

    <Button
        android:id="@+id/speakButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/scrollView"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="20dp"
        android:text="Speak to Gemini"
        android:textSize="18sp"
        android:paddingLeft="30dp"
        android:paddingRight="30dp"
        android:paddingTop="15dp"
        android:paddingBottom="15dp"
        android:backgroundTint="#6200EE"
        android:textColor="@android:color/white"
        android:elevation="8dp"
        android:stateListAnimator="@null" />
        <!--
            VR Performance: Buttons and Interactivity
            - Simple buttons like this are generally fine.
            - For custom interactive elements in VR (e.g., gaze-based or controller-based interactions),
              ensure their hitboxes are appropriately sized and that visual feedback is immediate
              without causing performance drops on the main thread.
            - The elevation adds a shadow, which is a form of overdraw. In VR, simpler, flat UI elements
              (or faked depth using shaders if 3D) can sometimes be more performant than relying heavily
              on Android's elevation/shadow rendering for depth cues, especially if many elements use it.
        -->
</RelativeLayout>
