plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.myvrapp'
    compileSdk 34 // Or higher, e.g., 34

    // Define GEMINI_API_KEY sourcing logic
    // Priority: Env Var -> gradle.properties -> Hardcoded
    def geminiApiKey = System.getenv("GEMINI_API_KEY") ?: project.properties.get("GEMINI_API_KEY", "YOUR_API_KEY_HERE")
    // Ensure the key is properly quoted for string inclusion in generated BuildConfig
    def quotedGeminiApiKey = "\"${geminiApiKey}\""

    defaultConfig {
        applicationId "com.example.myvrapp"
        minSdk 29 // Oculus Quest 2 requires API Level 29
        targetSdk 34 // Or higher, matching compileSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // buildConfigField "String", "GEMINI_API_KEY", "\"YOUR_API_KEY_HERE\"" // Default placeholder - will be handled by build types
    }

    signingConfigs {
        release {
            storeFile file(project.properties.get("RELEASE_STORE_FILE", "DEFAULT_NO_KEYSTORE_FILE_PATH"))
            storePassword project.properties.get("RELEASE_STORE_PASSWORD", "DEFAULT_NO_PASSWORD")
            keyAlias project.properties.get("RELEASE_KEY_ALIAS", "DEFAULT_NO_ALIAS")
            keyPassword project.properties.get("RELEASE_KEY_PASSWORD", "DEFAULT_NO_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "String", "GEMINI_API_KEY", quotedGeminiApiKey
        }
        debug {
            buildConfigField "String", "GEMINI_API_KEY", quotedGeminiApiKey
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        buildConfig true
        // No view binding or data binding for a "No Activity" project initially
        // viewBinding true
        // dataBinding true
        // For VR, we might need to enable manifest merging for VR features if not handled by OVR plugins
    }

    // Log build type and signing status
    project.afterEvaluate {
        android.applicationVariants.all { variant ->
            println "Building variant: ${variant.name}"
            if (variant.buildType.name == "release" && variant.signingConfig) {
                println "Signing for release build is configured with: ${variant.signingConfig.name}"
                if (variant.signingConfig.storeFile == null || !variant.signingConfig.storeFile.exists()) {
                    project.logger.warn("WARN: Release keystore file not found at: ${variant.signingConfig.storeFile}. Ensure RELEASE_STORE_FILE is set correctly in gradle.properties.")
                }
            } else if (variant.buildType.name == "release") {
                project.logger.error("ERROR: Release build type is not configured for signing. APK will be unsigned.")
            }
        }
    }
}

dependencies {
    // Standard Android dependencies
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1' // Even without activities, some utils might be useful
    implementation 'com.google.android.material:material:1.11.0' // For potential future UI elements

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Gemini AI dependencies
    implementation 'com.google.ai.client.generativeai:generativeai:0.2.0'
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict'

    // Oculus / VR specific dependencies would be added here later
    // For example:
    // implementation 'com.oculus.vrapi:vrapi:2.0.0' (Example, actual dependency may vary)
    // implementation project(':ovrplatformloader') // If using Oculus Platform SDK
}
